#!/bin/bash
#
#========================================================================
# HEADER
#========================================================================
#% SYNOPSIS
#+  remora ./myapp [args]                     (serial applications)
#+  remora ibrun [options] ./myapp [args]     (parallel MPI applications)
#%
#% DESCRIPTION
#% REMORA: REsource MOnitoring for Remote Applications
#%
#% REMORA is an easy to use monitoring tool that allows users to extract
#% valuable information from their jobs:
#%       - CPU usage
#%       - Memory
#%       - IO statistics
#%       - ...
#%
#% It is advisable that he following environmental variables are set:
#%
#% TACC_REMORA_PERIOD  - How often statistics are collected.
#%                         Default is 10 seconds.
#%                         Integer values are accepted.
#% TACC_REMORA_VERBOSE - Verbose mode will save all information to a file. 
#%                         Default is 0 (off).
#%                         Values 0 and 1 are accepted.
#% TACC_REMORA_MODE    - How many stats are collected. Possible values:
#%                         - FULL (default): cpu, memory, network, lustre
#%                         - BASIC: cpu, memory
#%
#========================================================================
#- IMPLEMENTATION
#-      version     REMORA 0.1
#-      authors     Carlos Rosales (carlos@tacc.utexas.edu)
#-                  Antonio Gomez  (agomez@tacc.utexas.edu)
#-      license     MIT
#
#========================================================================
#  HISTORY
#       2015/08/12: Initial version
#========================================================================
#
# DEBUG OPTION
#     TACC_REMORA_BIN set to workdir with copies of the scripts
#
#========================================================================
# END_OF_HEADER
#========================================================================

SCRIPT_HEADSIZE=$(head -200 ${0} |grep -n "^# END_OF_HEADER" | cut -f1 -d:)
SCRIPT_NAME="$(basename ${0})"

usage() { printf '\033[0;33mREMORA Howto\n\033[0m'; head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#+" | sed -e "s/^#+[ ]*//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g" ; }
usagefull() { head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#[%+-]" | sed -e "s/^#[%+-]//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g" ; }
scriptinfo() { head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#-" | sed -e "s/^#-//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g"; }
print_error() { printf '\033[0;31mREMORA Error: \033[0;34m '"$1"' \033[0m \n'; }

# trap ctrl-c and call ctrl_c()
trap ctrl_c INT

#Make sure we don't leave anything behind
function ctrl_c() {
  if [ "$TACC_REMORA_MODE" = "FULL" ]; then
    # Kill lustre monitoring processes
    kill -9 $XLTOP_PID
  fi

  # Kill memory usage collection process
  idx=0
  for i in $NODES
  do
    echo 'kill '${PID[$idx]}
    ssh -f $i 'kill '${PID[$idx]}
    if [ "$SYMMETRIC" == "1" ]; then
      ssh -q -f $i-mic0 'kill '${PID_MIC[$idx]}
    fi  
    idx=$((idx+1))
  done
  exit
}


function show_time () {
  num=$1/1000000000
  ((milisec=($1/1000000)%1000))
  min=0
  hour=0
  day=0
  if((num>59));then
    ((sec=num%60))
    ((num=num/60))
    if((num>59));then
      ((min=num%60))
      ((num=num/60))
      if((num>23));then
        ((hour=num%24))
        ((day=num/24))
      else
        ((hour=num))
      fi
    else
      ((min=num))
    fi
  else
    ((sec=num))
  fi
  echo "TACC: Total Elapsed Time       : "$day"d "$hour"h "$min"m "$sec"s "$milisec"ms"
}


if [ -n "${PMI_ID+1}" ]; then
  if [ "$PMI_ID" == "0" ]; then
    print_error "Incorrect syntax: REMORA can't run in parallel"
    usage
  fi
  exit
fi

# Check if help should be printed
if [ "x$1" == "x--help" ]; then
  usagefull
  exit
fi

# Check that we have at least some arguments
if [ "x$1" == "x" ]; then
  print_error " Incorrect syntax: insufficient arguments. "
  usage
  exit
fi

# Check if this is a sequential, parallel, or symmetric run
SYMMETRIC=0
PARALLEL=0
if [ "x$1" == "xibrun" ]; then
  PARALLEL=1
elif [ "x$1" == "xibrun.symm" ]; then
  PARALLEL=1
  SYMMETRIC=1
fi

# Check if verbose output is required
VERBOSE=0
if [ "x$TACC_REMORA_VERBOSE" == "x1" ]; then
  VERBOSE=1
  usagefull
fi
if [ -z "$TACC_REMORA_MODE" ]; then
  export TACC_REMORA_MODE=FULL
fi

if [ "$TACC_REMORA_MODE" != "FULL" ] && [ "$TACC_REMORA_MODE" != "BASIC" ]; then
  export TACC_REMORA_MODE=FULL
fi

# Check if the data collection period has been set by the user
# If it has not, set it to a default of 10 seconds
if [ -z "$TACC_REMORA_PERIOD" ]; then
  export TACC_REMORA_PERIOD=10
fi
# If data collection period is set to somethign lower than 1 second, reset it
if [ "$TACC_REMORA_PERIOD" -lt "1" ]; then
  export TACC_REMORA_PERIOD=1
fi

CWD=`pwd`
# Determing current work directory
OUTDIR=$CWD/remora_$SLURM_JOB_ID
mkdir -p $OUTDIR
rm -rf $OUTDIR/*

PID=()
PID_MIC=()
LID=()

if [ "$TACC_REMORA_MODE" = "FULL" ]; then
  XLTOP_PID=`nohup watch -n$TACC_REMORA_PERIOD  xltop --master=master > /dev/null 2>&1 & echo $!`
fi

if [ "$TACC_REMORA_MODE" = "FULL" ]; then
  ibstatus mlx4_0 > $OUTDIR/ibstatus.txt
  echo "__________________________" >> $OUTDIR/ibstatus.txt
fi


# Start memory usage collection in the
# background and capture process ID
NODES=`scontrol show hostname $SLURM_NODELIST`
node_cnt=0; for i in $NODES; do node_cnt=$(( node_cnt + 1 )); done

# Need to check that the hostlist is not empty
if [ "$node_cnt" == "0"  ];then
  print_error "SLURM host list unavailable"
  exit 1
fi

# Doing this here because we want slurm hostlist check to run
# to make sure we are in a compute node
if [ "$PARALLEL" == "0" ]; then
  NODES=`hostname -s`
fi

#Text file containing job report environmental variables and start-end timestamp
date >> $OUTDIR/vars.txt 
echo "" >> $OUTDIR/vars.txt
echo "TACC_REMORA_PERIOD  : $TACC_REMORA_PERIOD"  >> $OUTDIR/vars.txt
echo "TACC_REMORA_VERBOSE : $TACC_REMORA_VERBOSE" >> $OUTDIR/vars.txt
echo "TACC_REMORA_MODE    : $TACC_REMORA_MODE"    >> $OUTDIR/vars.txt

#Dump environment during run
env > $OUTDIR/env.txt
# Start data collection
idx=0
for i in $NODES
do
  LID[$idx]=`ssh $i -f 'cat /sys/class/infiniband/mlx4_0/ports/1/lid'`
  PID[$idx]=`ssh -f $i 'sh '$TACC_REMORA_BIN'/remora_report.sh '$i $OUTDIR $TACC_REMORA_PERIOD $SYMMETRIC $TACC_REMORA_MODE' > .TACC_remora_out 2> .TACC_remora_err < /dev/null  & echo \$!'`
  if [ "$SYMMETRIC" == "1" ]; then
    PID_MIC[$idx]=`ssh -q -f $i-mic0 'sh '$TACC_REMORA_BIN'/remora_report_mic.sh '$i-mic0 $OUTDIR $TACC_REMORA_PERIOD $SYMMETRIC $TACC_REMORA_MODE $TACC_REMORA_BIN' > .TACC_remora_out 2> .TACC_remora_err < /dev/null & echo \$!'`
  fi
  idx=$((idx+1))
done

if [ "$TACC_REMORA_MODE" = "FULL" ]; then
  if [ "$PARALLEL" == "1" ]; then
    # IB connectivity info
    idx=1
    while [  $idx -lt $node_cnt ]; do
      ibtracert ${LID[0]} ${LID[$idx]} > $OUTDIR/trace_network.txt
      echo "_____________" > $OUTDIR/trace_network.txt
      idx=$((idx+1))
    done
  fi
fi

echo ""
if [ "$VERBOSE" == "1" ]; then
  echo "TACC: Running command remora $@ "
fi; 

echo ""

START=$(date +%s%N)
# Execute original job
$@
END=$(date +%s%N)

if [ "$TACC_REMORA_MODE" = "FULL" ]; then
  ibstatus mlx4_0 >> $OUTDIR/ibstatus.txt
fi

if [ "$TACC_REMORA_MODE" = "FULL" ]; then
  # Kill lustre monitoring processes
  kill -9 $XLTOP_PID
fi

# Kill memory usage collection process
idx=0
for i in $NODES
do
  ssh -f $i 'kill '${PID[$idx]}
  if [ "$SYMMETRIC" == "1" ]; then
    ssh -q -f $i-mic0 'kill '${PID_MIC[$idx]}
  fi
  idx=$((idx+1))
done

# Write to stdout the maximum memory used during the run
echo ""
for i in $NODES
do
  ssh $i "$TACC_REMORA_BIN/remora_summary.sh $i $OUTDIR $SYMMETRIC"
done 
#if [ "$VERBOSE" == "0" ]; then
#	rm -rf $OUTDIR
#fi
# Write time the run ended
echo "" >> $OUTDIR/vars.txt; date >> $OUTDIR/vars.txt

echo "=============================================================================="
# Print memory usage to stdout
#I can't think of a case were virtual would be less than resident, so let's report only virtual in stdout (which triggers OOM killer)..
#real_max_cpu=$(awk ' NR == 1 {max=$3; min=$3} NR > 1 && $3 > max {max=$3} END {printf "TACC: Maximum Memory Used Per Node: %6.4f GB\n",max}' $OUTDIR/mem_all_nodes.txt)
awk ' NR == 1 {max=$2; min=$2} NR > 1 && $2 > max {max=$2} END {printf "TACC: Max Memory Used Per Node : %4.2f GB\n",max}' $OUTDIR/mem_all_nodes.txt
free_min_cpu=$(awk ' NR == 1 {max=$4; min=$4} NR > 1 && $4 < min {min=$4} END {printf "%4.2f\n",min}' $OUTDIR/mem_all_nodes.txt)
free_min_cpu_virt=$(awk ' NR == 1 {max=$2; min=$2} NR > 1 && $2 > max {max=$2} END {print 32.0-max}' $OUTDIR/mem_all_nodes.txt)
echo "$free_min_cpu_virt 2.0" | awk '{res=0} $1 < $2 {printf "TACC: WARNING - Free memory per node close to zero ( %4.2f GB )\n",free_min_cpu}'
sed -i '1i #HOST     VIRT_MAX  RES_MAX  FREE_MIN' $OUTDIR/mem_all_nodes.txt

if [ "$SYMMETRIC" == "1" ]; then
  #Virtual memory in Phi seems to report always resident+8GB, so let's report only resident in stdout, which we know is true.
  awk ' NR == 1 {max=$3; min=$3} NR > 1 && $3 > max {max=$3} END {printf "TACC: Max Memory Used Per Phi  : %4.2f GB\n",max}' $OUTDIR/mem_all_nodes_mic.txt
  #awk ' NR == 1 {max=$2; min=$2} NR > 1 && $2 > max {max=$2} END {printf "TACC: Maximum Virtual Memory Used Per Xeon Phi: %6.4f GB\n",max}' $OUTDIR/mem_all_nodes_mic.txt
  free_min_mic=$(awk ' NR == 1 {max=$4; min=$4} NR > 1 && $4 < min {min=$4} END {printf "%4.2f\n",min}' $OUTDIR/mem_all_nodes_mic.txt)
  free_min_mic_virt=$(awk ' NR == 1 {max=$3; min=$3} NR > 1 && $3 > max {max=$3} END {print 7.0-max}' $OUTDIR/mem_all_nodes_mic.txt)
  echo "$free_min_mic_virt 1.0" | awk '{res=0} $1 < $2 {printf "TACC: WARNING - Free memory per Xeon Phi close to zero ( %4.2f GB )\n",free_min_mic}'
  sed -i '1i #HOST     VIRT_MAX  RES_MAX  FREE_MIN' $OUTDIR/mem_all_nodes_mic.txt
fi

#Show Maximum IO Requests/S to all MDS servers (H-Home, S-Scratch, W-Work)

#Show some timings (h:m:s.ms)
show_time $((END-START))

if [ "$TACC_REMORA_MODE" == "FULL" ]; then
  remora_parse_fs.sh $OUTDIR/xltop.txt
fi

echo "------------------------------------------------------------------------------"
echo "TACC: Sampling Period          : $TACC_REMORA_PERIOD seconds"
echo "TACC: Complete Report Data     : $OUTDIR"
echo "=============================================================================="
# Add some headers
echo ""
