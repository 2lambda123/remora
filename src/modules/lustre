#!/bin/sh
#
#========================================================================
# HEADER
#========================================================================
#% DESCRIPTION
#% lustre
#%
#% DO NOT call this script directly. This is called by REMORA
#%
#========================================================================
#- IMPLEMENTATION
#-      version     REMORA 1.4
#-      authors     Carlos Rosales (carlos@tacc.utexas.edu)
#-                  Antonio Gomez  (agomez@tacc.utexas.edu)
#-      license     MIT
#
#========================================================================
#  HISTORY
#       2015/12/08: Initial commit
#========================================================================

# All the functions take two arguments:
#  1.- The name of the node where this function is running
#  2.- The full path where the output will be stored/read

init_module_lustre()
{
  :
}

collect_data_lustre()
{
    if [ "$SYMMETRIC" == "0" ]; then
        if [ "$REMORA_MODE" = "FULL" ]; then
            local LUSTRE_DIR_PATH=/proc/fs/lustre
            local TIMESTAMP=`date +%s`
            for FILE in $LUSTRE_DIR_PATH/{mdc,osc}/*
            do
                if [ -d "${FILE}" ] ; then
                    local COUNTER=`grep req_waittime $FILE/stats | awk '{print $2}'`
                    local DEVICE=`sed -e 's/\/proc\/fs\/lustre//' <<< "$FILE" | cut -d "/" -f 3 | cut -d "-" -f 1,2`
                    printf "%-17d %-17d\n" $TIMESTAMP $COUNTER >> $2/lustre_$1_$DEVICE.txt
                fi
            done
        fi
    fi
}

# This function might perform some processing on the data.
# If nothing needs to be done, it can be empty (but declared)
process_data_lustre()
{
  :
}

finalize_module_lustre()
{
    local FSS=`df --type=lustre -P`

    local MOUNTS=()
    local idx=0
    while read -r line; do
        MOUNTS[$idx]=$line
        idx=$((idx+1))
    done <<< "$FSS"

    local prefix=$2/lustre_$1_
    local sufix=".txt"
    for FILE in $2/lustre_$1_*.txt
    do
        local foo=${FILE#$prefix}
        local DEVICE=${foo%$sufix}
        for MOUNT in "${MOUNTS[@]}"
        do
            #Get the line where the given DEVICE is mounted
            local FS=`echo $MOUNT | grep $DEVICE`
            if [ ! -z "$FS" ]; then
                #get the last column
                local temp=`echo -e "$FS" | awk '{print $NF}'`
                #Remove any "/" character
                local val=${temp//\/}
                #Right now we just print this. I'll finish this tomorrow
                echo $val
                break
            fi
        done
    done
}
