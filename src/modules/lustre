#!/bin/sh
#
#========================================================================
# HEADER
#========================================================================
#% DESCRIPTION
#% lustre
#%
#% DO NOT call this script directly. This is called by REMORA
#%
#========================================================================
#- IMPLEMENTATION
#-      version     REMORA 1.4
#-      authors     Carlos Rosales (carlos@tacc.utexas.edu)
#-                  Antonio Gomez  (agomez@tacc.utexas.edu)
#-      license     MIT
#
#========================================================================
#  HISTORY
#       2015/12/08: Initial commit
#========================================================================

# All the functions take two arguments:
#  1.- The name of the node where this function is running
#  2.- The full path where the output will be stored/read

init_module_lustre()
{
    if [ "$REMORA_SYMMETRIC" == "0" ]; then
        if [ "$REMORA_MODE" = "FULL" ]; then
            #Capture the "internal" names (IFSNAMES) of the lustre filesystems
            #and the names of the mounts (FSNAMES)
            FSS=`df --type=lustre -P`
            local MOUNTS=()
            local idx=0
            IFSNAMES=()
            FSNAMES=()
            while read -r line; do
                if [ $idx == 0 ]; then
                    idx=$((idx+1))
                    continue
                fi
                IFSNAMES[$idx-1]=`echo $line  | sed 's/.*:\///' | awk '{print $1;}'`
                local TEMP=`echo $line | sed 's/.*:\///' | awk '{print $6;}'`
                FSNAMES[$idx-1]=`echo "${TEMP////}"`
                if [ "$REMORA_VERBOSE" == "1" ]; then
                    echo ${IFSNAMES[$idx-1]} ${FSNAMES[$idx-1]}
                fi
                idx=$((idx+1))
            done <<< "$FSS"

            printf "%-17s %-17s" TIMESTAMP "${FSNAMES[@]}" >> $2/lustre_$1.txt
            printf "\n"  >> $2/lustre_$1.txt
        fi
    fi
}

collect_data_lustre()
{
    # cat /proc/fs/lustre/{mdc,osc}/scratch*/stats | grep waittime | awk '{print $2;}' | paste -sd+ | bc
    # The values scratch, home, gsfs come from "df --type=lustre"

    if [ "$REMORA_SYMMETRIC" == "0" ]; then
        if [ "$REMORA_MODE" = "FULL" ]; then
            local LUSTRE_DIR_PATH=/proc/fs/lustre
            local TIMESTAMP=`date +%s`
            local idx=0
            local COUNTER=()
            for fs in "${IFSNAMES[@]}"
            do
                if [ "$REMORA_VERBOSE" == "1" ]; then
                    echo "cat /proc/fs/lustre/{mdc,osc}/$fs*/stats | grep req_waittime | awk '{print \$2;}' | paste -sd+ | bc"
                fi
                COUNTER[$idx]=`cat /proc/fs/lustre/{mdc,osc}/$fs*/stats | grep req_waittime | awk '{print $2;}' | paste -sd+ | bc`
				idx=$((idx+1))
            done
            printf "%-17d %-17d" $TIMESTAMP "${COUNTER[@]}" >> $2/lustre_$1.txt
            printf "\n"  >> $2/lustre_$1.txt
        fi
    fi
}

# This function might perform some processing on the data.
# If nothing needs to be done, it can be empty (but declared)
process_data_lustre()
{
  :
}

finalize_module_lustre()
{
  REMORA_NODE_ID=$3

  if [ "$REMORA_NODE_ID" == "0" ]; then 
    echo "Aggregating lustre data"
    FSS=`df --type=lustre -P`
    local idx=0
    local IFSNAMES=()
    while read -r line; do
      if [ $idx == 0 ]; then
        idx=$((idx+1))
        continue
      fi  
      IFSNAMES[$idx-1]=`echo $line  | sed 's/.*:\///' | awk '{print $1;}'`
      idx=$((idx+1))
    done <<< "$FSS"

    # Generate a single file per lustre file 
    # system and node
    for file in `ls lustre_*.txt`; do
      fs_col=2
      cut -d ' ' -f 1        $2/$file > snapshot.$FS
      for FS in "${IFSNAMES[@]}"; do
        cut -d ' ' -f $fs_col  $2/$file > $file.$FS
        fs_col=$((fs_col+1))
      done
    done
    # Merge data from all nodes and each lustre file system
    local idx=0
    for FS in "${IFSNAMES[@]}"; do
      paste snapshot.$FS lustre_*.txt.$FS > merged.$FS
      awk '{ sum=sum+$2 } END {print $1 "\t" sum}' merged.$FS > total.$FS
      idx=$((idx+1))
      #rm -q ./*.$FS 
    done

  fi
}
