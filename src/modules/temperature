#!/bin/bash
#
#========================================================================
# HEADER
#========================================================================
#% DESCRIPTION
#% Temperature
#%
#% DO NOT call this script directly. This is called by REMORA
#%
#========================================================================
#- IMPLEMENTATION
#-      version     REMORA 1.8.5
#-      authors     Carlos Rosales ( carlos@tacc.utexas.edu)
#-                  Antonio Gomez  ( agomez@tacc.utexas.edu)
#-      custodian   Kent Milfeld   (milfeld@tacc.utexas.edu)
#-      license     MIT
#========================================================================

# All the functions take three arguments:
#  1.- The name of the node where this function is running
#  2.- The full path where the output will be stored/read
#  3.- The full path to an optional temporary storage location

init_module_temperature()
{
  REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
  files=`ls -v /sys/devices/platform/coretemp.0/temp*_input`
  export REMORA_TEMPERATURE_IGNORE=$?

  REMORA_MASTER=`head -n 1 $REMORA_OUTDIR/remora_nodes.txt`
  if [[ "$REMORA_NODE" == "$REMORA_MASTER" ]]; then
      echo "export REMORA_TEMPERATURE_IGNORE=$REMORA_TEMPERATURE_IGNORE" >> $REMORA_OUTDIR/remora_env.txt
  fi  

  if [[ $REMORA_TEMPERATURE_IGNORE -ne 0 ]]; then
    return 1
  fi

  rm -f $REMORA_TMPDIR/temperature_${REMORA_NODE}.txt
  files=`ls -v /sys/devices/platform/coretemp.0/temp*_input`
  local header="TIME"
  local format="%-17s"
  for file in $files; do
    local corenumber=${file/\/sys\/devices\/platform\/coretemp.0\/temp}
    corenumber=${corenumber%_input}
    header="$header    core$corenumber"
    format="$format %-8s"
  done
  format="$format \n"
  printf "$format" $header >> $REMORA_TMPDIR/temperature_${REMORA_NODE}.txt
}

collect_data_temperature()
{
  if [[ $REMORA_TEMPERATURE_IGNORE -ne 0 ]]; then
    return 1
  fi

  local TIMESTAMP=`date +%s`
  REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
  files=`ls -v /sys/devices/platform/coretemp.0/temp*_input`
  local output=""
  local format="%-17d"
  for file in $files; do
    local temp=$( cat $file )
    let temp=$temp/1000
    output="$output $temp"
    format="$format %-4d"
  done
  format="$format \n"
  printf "$format" $TIMESTAMP $output >> $REMORA_TMPDIR/temperature_${REMORA_NODE}.txt
}


# This function might perform some processing on the data.
# If nothing needs to be done, it can be empty (but declared)
process_data_temperature()
{
  :
}

plot_data_temperature()
{
    REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
    if [[ -z ${REMORA_PLOT_RESULTS+x} ]] || [[ "$REMORA_PLOT_RESULTS" -eq "0" ]] ; then
        return
    fi

    if [[ ! -e $REMORA_TMPDIR/temperature_${REMORA_NODE}.txt ]]; then
        if [[ "$REMORA_VERBOSE" == "1" ]]; then
            echo "File $REMORA_TMPDIR/temperature_${REMORA_NODE}.txt not found"
        fi
        return
    fi

    printf "%s \n" "<html>" > $REMORA_TMPDIR/temperature_${REMORA_NODE}.html
    printf "%s \n" "<head>" >> $REMORA_TMPDIR/temperature_${REMORA_NODE}.html
    printf "%s \n" "<script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>" >> $REMORA_TMPDIR/temperature_${REMORA_NODE}.html
    printf "%s \n" "<script type=\"text/javascript\">" >> $REMORA_TMPDIR/temperature_${REMORA_NODE}.html
    printf "%s \n" "google.charts.load('current', {'packages':['line']});" >> $REMORA_TMPDIR/temperature_${REMORA_NODE}.html

    printf "%s \n" "google.charts.setOnLoadCallback(drawChart);" >> $REMORA_TMPDIR/temperature_${REMORA_NODE}.html
    printf "%s \n" "function drawChart() {" >> $REMORA_TMPDIR/temperature_${REMORA_NODE}.html
    printf "%s \n" "var data = new google.visualization.DataTable();" >> $REMORA_TMPDIR/temperature_${REMORA_NODE}.html
    line=`head -n 1 $REMORA_TMPDIR/temperature_${REMORA_NODE}.txt`
    local cpus=0
    for i in $line; do
        printf "%s %s %s \n" "data.addColumn('number', '" $i "');" >> $REMORA_TMPDIR/temperature_${REMORA_NODE}.html
        cpus=$[cpus + 1]
    done

    printf "%s\n" "data.addRows([" >> $REMORA_TMPDIR/temperature_${REMORA_NODE}.html
    local ctime=0
    local first=0
    local firsttimestamp=0
    while read line; do
        if [[ $first -eq 0 ]]; then
            first=1
            continue
        fi
        if [[ $first -eq 1 ]]; then
            first=2
            firsttimestamp=`echo $line | awk '{print $1;}'`
        fi
        local timestamp=`echo $line | awk '{print $1;}'`
        ctime=$[timestamp - firsttimestamp]
        local idx=0
        sout=$ctime
        for i in $line;
        do
            if [[ $idx -gt 0 ]]; then
                sout=$sout","$i
            fi
            idx=$[idx + 1]
        done
        printf "%s%s%s \n" "[" $sout "]," >> $REMORA_TMPDIR/temperature_${REMORA_NODE}.html
    done < $REMORA_TMPDIR/temperature_${REMORA_NODE}.txt

    printf "%s \n" "]);" >> $REMORA_TMPDIR/temperature_${REMORA_NODE}.html
    printf "%s \n" "var options = { " >> $REMORA_TMPDIR/temperature_${REMORA_NODE}.html
    printf "%s \n" "chart: {" >> $REMORA_TMPDIR/temperature_${REMORA_NODE}.html
    printf "%s \n" "title: 'CPU Temperature'," >> $REMORA_TMPDIR/temperature_${REMORA_NODE}.html
    printf "%s \n" "subtitle: 'in Celsius' " >> $REMORA_TMPDIR/temperature_${REMORA_NODE}.html
    printf "%s \n" "}," >> $REMORA_TMPDIR/temperature_${REMORA_NODE}.html
    #Only show the legend when there are few cores. Otherwise (think KNL), there are too many
    #cores and the legend is difficult to read
    if [[ $cpus -gt 24 ]]; then
        printf "%s \n" "legend: {position: 'none', textStyle: {fontSize: 16}}," >> $REMORA_TMPDIR/temperature_${REMORA_NODE}.html
    fi
    printf "%s \n" "width: 1024, " >> $REMORA_TMPDIR/temperature_${REMORA_NODE}.html 
    printf "%s \n" "height: 800, " >> $REMORA_TMPDIR/temperature_${REMORA_NODE}.html 
    printf "%s \n" "axes: { " >> $REMORA_TMPDIR/temperature_${REMORA_NODE}.html 
    printf "%s \n" "x: { " >> $REMORA_TMPDIR/temperature_${REMORA_NODE}.html 
    printf "%s \n" "0: {side: 'top'} " >> $REMORA_TMPDIR/temperature_${REMORA_NODE}.html 
    printf "%s \n" "} " >> $REMORA_TMPDIR/temperature_${REMORA_NODE}.html 
    printf "%s \n" "}, " >> $REMORA_TMPDIR/temperature_${REMORA_NODE}.html 
    printf "%s \n" " }; " >> $REMORA_TMPDIR/temperature_${REMORA_NODE}.html

    printf "%s \n" "var chart = new google.charts.Line(document.getElementById('line_top_x')); " >> $REMORA_TMPDIR/temperature_${REMORA_NODE}.html 
    printf "%s \n" "chart.draw(data, options); " >> $REMORA_TMPDIR/temperature_${REMORA_NODE}.html 
    printf "%s \n" "} " >> $REMORA_TMPDIR/temperature_${REMORA_NODE}.html 
    printf "%s \n" "</script> " >> $REMORA_TMPDIR/temperature_${REMORA_NODE}.html 
    printf "%s \n" "</head> " >> $REMORA_TMPDIR/temperature_${REMORA_NODE}.html 
    printf "%s \n" "<body> " >> $REMORA_TMPDIR/temperature_${REMORA_NODE}.html 
    printf "%s \n" "  <div id=\"line_top_x\"></div> " >> $REMORA_TMPDIR/temperature_${REMORA_NODE}.html 
    printf "%s \n" "</body> " >> $REMORA_TMPDIR/temperature_${REMORA_NODE}.html 
    printf "%s \n" "</html> " >> $REMORA_TMPDIR/temperature_${REMORA_NODE}.html 
}

monitor_data_temperature()
{
  :
}

finalize_module_temperature()
{
    REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
    plot_data_temperature $REMORA_NODE $REMORA_OUTDIR $REMORA_TMPDIR
}
