#!/bin/sh
#
#========================================================================
# HEADER
#========================================================================
#% DESCRIPTION
#% mpi
#%
#% DO NOT call this script directly. This is called by REMORA
#%
#========================================================================
#- IMPLEMENTATION
#-      version     REMORA 1.7
#-      authors     Carlos Rosales (carlos@tacc.utexas.edu)
#-                  Antonio Gomez  (agomez@tacc.utexas.edu)
#-      license     MIT
#========================================================================

# All the functions take three arguments:
#  1.- The name of the node where this function is running
#  2.- The full path where the output will be stored/read
#  3.- The full path to an optional temporary storage location

init_module_impi()
{
  REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3

  REMORA_MASTER=`head -n 1 $REMORA_OUTDIR/remora_nodes.txt`
  if [ "$REMORA_NODE" == "$REMORA_MASTER" ]; then
      echo "export I_MPI_STATS=ipm" >> $REMORA_OUTDIR/remora_env.txt
      echo "export I_MPI_STATS_FILE=impi_data.txt" >> $REMORA_OUTDIR/remora_env.txt
  fi
}

collect_data_impi()
{
  :
}

# This function might perform some processing on the data.
# If nothing needs to be done, it can be empty (but declared)
process_data_impi()
{
  :
}

monitor_data_impi()
{
  :
}

plot_data_impi()
{
    REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
    if [ -z ${REMORA_PLOT_RESULTS+x} ] || [ "$REMORA_PLOT_RESULTS" -eq "0" ] ; then
        return
    fi  

    REMORA_MASTER=`head -n 1 $REMORA_OUTDIR/remora_nodes.txt`
    if [ "$REMORA_NODE" == "$REMORA_MASTER" ]; then
        # Get overall data from generated file
        mpifrac=$(tail -n 1 $REMORA_OUTDIR/impi_info.txt | awk '{print $4}')
        serialfrac=$( echo "scale=4; 100 - $mpifrac" | bc )

        # Generate the plot
        printf "%s \n" "<html>" > $REMORA_TMPDIR/impi_comm_fraction.html
        printf "%s \n" "<head>" >> $REMORA_TMPDIR/impi_comm_fraction.html
        printf "%s \n" "<script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>" >> $REMORA_TMPDIR/impi_comm_fraction.html
        printf "%s \n" "<script type=\"text/javascript\">" >> $REMORA_TMPDIR/impi_comm_fraction.html
        printf "%s \n" "google.charts.load('current', {'packages':['corechart']});" >> $REMORA_TMPDIR/impi_comm_fraction.html
        printf "%s \n" "google.charts.setOnLoadCallback(drawChart);" >> $REMORA_TMPDIR/impi_comm_fraction.html

        printf "%s \n" "function drawChart() {" >> $REMORA_TMPDIR/impi_comm_fraction.html

        printf "%s \n" "var data = google.visualization.arrayToDataTable([" >> $REMORA_TMPDIR/impi_comm_fraction.html
        printf "%s \n" "['Task', 'Time in %']," >> $REMORA_TMPDIR/impi_comm_fraction.html
        printf "['Sequential Work',     $serialfrac ], \n" >> $REMORA_TMPDIR/impi_comm_fraction.html
        printf "['MPI',      $mpifrac ] \n" >> $REMORA_TMPDIR/impi_comm_fraction.html
        printf "%s \n" "]);" >> $REMORA_TMPDIR/impi_comm_fraction.html

        printf "%s \n" "var options = {" >> $REMORA_TMPDIR/impi_comm_fraction.html
        printf "%s \n" "title: 'MPI Time'" >> $REMORA_TMPDIR/impi_comm_fraction.html
        printf "%s \n" "};" >> $REMORA_TMPDIR/impi_comm_fraction.html

        printf "%s \n" "var chart = new google.visualization.PieChart(document.getElementById('piechart'));" >> $REMORA_TMPDIR/impi_comm_fraction.html

        printf "%s \n" "chart.draw(data, options);" >> $REMORA_TMPDIR/impi_comm_fraction.html
        printf "%s \n" "}" >> $REMORA_TMPDIR/impi_comm_fraction.html
        printf "%s \n" "</script>" >> $REMORA_TMPDIR/impi_comm_fraction.html
        printf "%s \n" "</head>" >> $REMORA_TMPDIR/impi_comm_fraction.html
        printf "%s \n" "<body>" >> $REMORA_TMPDIR/impi_comm_fraction.html
        printf "%s \n" "<div id="piechart" style="width: 900px; height: 500px;"></div>" >> $REMORA_TMPDIR/impi_comm_fraction.html
        printf "%s \n" "</body>" >> $REMORA_TMPDIR/impi_comm_fraction.html
        printf "%s \n" "</html>" >> $REMORA_TMPDIR/impi_comm_fraction.html
    fi
}

finalize_module_impi()
{
  REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
  source $REMORA_OUTDIR/remora_env.txt
  REMORA_MASTER=`head -n 1 $REMORA_OUTDIR/remora_nodes.txt`
  if [ "$REMORA_NODE" == "$REMORA_MASTER" ]; then
	if [ "$REMORA_MODE" == "FULL" ] || [ "$REMORA_MODE" == "MONITOR" ]; then
        cd $REMORA_OUTDIR/..
        outfile=impi_data.txt
        # Check for mpiP output in case code was not MPI based
        fileNum=$( ls -ltr $outfile )
        if [ -n "$fileNum" ]; then
            mpiNum=$( grep "mpi_tasks" $outfile | awk '{print $7}' )
            nodeNum=$( grep "mpi_tasks" $outfile | awk '{print $9}' )
            usrTime=$( grep "# user" $outfile | awk '{print $6}' )
            sysTime=$(grep "# system" $outfile | awk '{print $6}' )
            mpiTime=$(grep "# mpi" $outfile | awk '{print $6}' )
            mpiFrac=$( echo "scale=4; 100.0 * $mpiTime / ( $usrTime + $sysTime +$mpiTime )" | bc ) 
            echo "Number of Nodes     : $nodeNum"    >  $REMORA_OUTDIR/impi_info.txt
            echo "Number of MPI Tasks : $mpiNum"     >> $REMORA_OUTDIR/impi_info.txt
            echo "Communication Time  : $mpiFrac %"  >> $REMORA_OUTDIR/impi_info.txt
            mv $outfile $REMORA_OUTDIR
	  fi
    fi
    plot_data_impi $REMORA_NODE $REMORA_OUTDIR $REMORA_TMPDIR
  fi
}
