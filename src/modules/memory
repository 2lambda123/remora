#!/bin/sh
#
#========================================================================
# HEADER
#========================================================================
#% DESCRIPTION
#% memory
#%
#% DO NOT call this script directly. This is called by REMORA
#%
#========================================================================
#- IMPLEMENTATION
#-      version     REMORA 1.5
#-      authors     Carlos Rosales (carlos@tacc.utexas.edu)
#-                  Antonio Gomez  (agomez@tacc.utexas.edu)
#-      license     MIT
#
#========================================================================
#  HISTORY
#       2015/12/08: Initial commit
#========================================================================

# All the functions take two arguments:
#  1.- The name of the node where this function is running
#  2.- The full path where the output will be stored/read
init_module_memory()
{
    vmem_max_global=0
    rmem_max_global=0
    tmem_max_global=0
    printf "%-17s %-17s %-17s %-17s %-17s %-17s %-17s %-17s\n" "#TIME" "VMEM_MAX" "VMEM" "RMEM_MAX" "RMEM" "SHMEM" "MEM_FREE" "TMEM_MAX"> $2/mem_stats_$1.txt
}

collect_data_memory()
{
    local TIMESTAMP=`date +%s`
    USER=`whoami`
    # Get space used in /dev/shm
    shmem_used=`du /dev/shm 2>/dev/null | tail -n 1 | awk '{print $1} '`
    shmem=$(echo "scale=4; $shmem_used/(1024*1024)" | bc)

    for i in `ps -u $USER | awk 'NR > 1 {print $1}'`; do cat /proc/$i/status 2> /dev/null 1>> $2/remora.mem; done
    vmem_max=$(grep VmPeak /tmp/remora.mem | awk '{sum+=$2} END {print sum/1024/1024}')
    rmem_max=$(grep VmHWM /tmp/remora.mem  | awk '{sum+=$2} END {print sum/1024/1024}')
    vmem=$(grep VmSize /tmp/remora.mem | awk '{sum+=$2} END {print sum/1024/1024}')
    rmem=$(grep VmRSS /tmp/remora.mem  | awk '{sum+=$2} END {print sum/1024/1024}')
    mem_free=`grep MemFree /proc/meminfo | awk '{ print $2/1024/1024 }'`
    tmem=$(echo "$rmem + $shmem" | bc)
    if [ $(echo "$vmem_max > $vmem_max_global" | bc) -eq 1 ]; then
        vmem_max_global=$vmem_max
    fi
    if [ $(echo "$rmem_max > $rmem_max_global" | bc) -eq 1 ]; then
        rmem_max_global=$rmem_max
    fi
    if [ $(echo "$tmem > $tmem_max_global" | bc) -eq 1 ]; then
        tmem_max_global=$tmem
    fi
    printf "%-17d %-17f %-17f %-17f %-17f %-17f %-17f %-17f\n" $TIMESTAMP $vmem_max_global $vmem $rmem_max_global $rmem $shmem $mem_free $tmem_max_global >> $2/mem_stats_$1.txt
    rm $2/remora.mem
}

# This function might perform some processing on the data.
# If nothing needs to be done, it can be empty (but declared)
process_data_memory()
{
  :
}

finalize_module_memory()
{
  :
}
