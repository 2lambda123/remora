#!/bin/bash
#
#========================================================================
# HEADER
#========================================================================
#% SYNOPSIS
#+  remora ./myapp [args]                     (serial applications)
#+  remora ibrun [options] ./myapp [args]     (parallel MPI applications)
#%
#% DESCRIPTION
#% REMORA: REsource MOnitoring for Remote Applications
#%
#% REMORA is an easy to use monitoring tool that allows users to extract
#% valuable information from their jobs:
#%       - CPU usage
#%       - Memory
#%       - IO statistics
#%       - ...
#%
#% It is advisable that he following environmental variables are set:
#%
#% REMORA_PERIOD  - How often statistics are collected.
#%                  Default is 10 seconds.
#%                  Integer values are accepted.
#% REMORA_VERBOSE - Verbose mode will save all information to a file.
#%                  Default is 0 (off).
#%                  Values 0 and 1 are accepted.
#% REMORA_MODE    - How many stats are collected. Possible values:
#%                  - FULL (default): cpu, memory, network, lustre
#%                  - BASIC: cpu, memory
#%
#========================================================================
#- IMPLEMENTATION
#-      version     REMORA 1.5
#-      authors     Carlos Rosales (carlos@tacc.utexas.edu)
#-                  Antonio Gomez  (agomez@tacc.utexas.edu)
#-      license     MIT
#
#========================================================================
#  HISTORY
#		2016/01/25: Added alternative location for temp files
#       2015/12/09: Implemented a modular design
#       2015/11/21: Removing TACC specific data
#       2015/09/09: Using python parser for file system data
#       2015/08/12: Initial version
#========================================================================
#  CITE REMORA
#       If you use REMORA please cite it, it will help us secure support
#       for further development
#                   REMORA: A Resource Monitoring Tool For Everyone
#                   C. Rosales, A. Gomez-Iglesias, A. Predoehl
#                   HUST2015 November 15-20, 2015, Austin, TX, USA
#                   DOI: 10.1145/2834996.2834999
#
#========================================================================
#
# DEBUG OPTION
#     REMORA_BIN set to workdir with copies of the scripts
#
#========================================================================
# END_OF_HEADER
#========================================================================

# Abort because we will not find any of the functions
# if REMORA_BIN is not defined
if [ -z "$REMORA_BIN" ]; then
    echo "ERROR: REMORA_BIN undefined"
    exit
fi

# These two lines allow functions in other files to kill the main
# process (REMORA_TOP_PID)
trap "exit 1" TERM
export REMORA_TOP_PID=$$

SCRIPT_HEADSIZE=$(head -200 ${0} |grep -n "^# END_OF_HEADER" | cut -f1 -d:)
SCRIPT_NAME="$(basename ${0})"

# Parse input and setup data collection
REMORA_OUTDIR=$($REMORA_BIN/remora_init.sh "$@")
export NODES=`cat $REMORA_OUTDIR/remora_nodes.txt`
source $REMORA_OUTDIR/remora_env.txt

PID=()
PID_MIC=()

idx=0
for NODE in $NODES
do
  #This is the core of REMORA. It connects to all the nodes allocated to this job and runs the remora_report.sh script
  #remora_report.sh will run an infinite loop where, in each iteration of the loop, it calls the different modules
  #that are available (specified in the configuration file)
  COMMAND="$REMORA_BIN/remora_report.sh $NODE $REMORA_TMPDIR $REMORA_EFFECTIVE_PERIOD $REMORA_SYMMETRIC $REMORA_MODE $REMORA_CUDA $REMORA_PARALLEL $REMORA_VERBOSE $REMORA_BIN > $REMORA_OUTDIR/.remora_out_$NODE & echo \$!"

  if [ "$REMORA_VERBOSE" == "1" ]; then
    echo ""; echo "ssh -f -n $NODE $COMMAND"
  fi

  #We have to capture the PID of the remote process running remora_report.sh
  #Since the script is an inifinite loop, we have to kill the process once the job
  #that we are analyzing has finished
  PID[$idx]=`ssh -f -n $NODE $COMMAND | sed -e's/\[.*\]//' `

  #Repeat the same for the MIC
  if [ "$REMORA_SYMMETRIC" == "1" ]; then
    COMMAND="$REMORA_BIN/remora_report_mic.sh ${NODE}-mic0 $REMORA_OUTDIR $REMORA_EFFECTIVE_PERIOD $REMORA_SYMMETRIC $REMORA_MODE $REMORA_PARALLEL $REMORA_VERBOSE $REMORA_BIN > $REMORA_OUTDIR/.remora_out_$NODE-mic0  &  echo \$! "
    if [ "$REMORA_VERBOSE" == "1" ]; then
        echo "ssh -q -f -n $NODE-mic0 $COMMAND"
    fi
    PID_MIC[$idx]=`ssh -q -f -n $NODE-mic0 $COMMAND `
  fi
  #Go to the next node
  idx=$((idx+1))
done
export REMORA_PID=`echo ${PID[@]}`
export REMORA_PID_MIC=`echo ${PID_MIC[@]}`

if [ "$REMORA_VERBOSE" == "1" ]; then
  echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
  echo "Running command: $@ "
  echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
fi

#Now that we have the collection of data running on the background, we start the appplication
START=$(date +%s%N)
# Execute original job
$@
END=$(date +%s%N)

./remora_finalize.sh $END $START



