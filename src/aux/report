#!/bin/sh
#
#========================================================================
# HEADER
#========================================================================
#% DESCRIPTION
#% report
#%
#% DO NOT call this script directory. This is called by REMORA
#%
#% This script provides extra functionality used by REMORA
#========================================================================
#- IMPLEMENTATION
#-      version     REMORA 1.7
#-      authors     Carlos Rosales (carlos@tacc.utexas.edu)
#-                  Antonio Gomez  (agomez@tacc.utexas.edu)
#-      license     MIT
#
#========================================================================
#  HISTORY
#       2015/12/09: Initial version
#========================================================================

show_final_report() {
    END=$1
    START=$2

	# Find out memeory per node
	local MEM_THRESHOLD=`grep MemTotal /proc/meminfo | awk '{print $2*0.95/1024/1024}'`

    # Write time the run ended
    date >> $REMORA_OUTDIR/remora_timestamp.txt

    local bar="------------------------------------------------------------------------------"
    local dbar="=============================================================================="

    echo ""
    echo "=============================== REMORA SUMMARY ===============================" | tee -a $REMORA_OUTDIR/remora_summary.txt
# Print memory usage to stdout
# I can't think of a case were virtual would be less than resident, so let's report only virtual in stdout (which triggers OOM killer)..
    if [ "$REMORA_CUDA" == "0" ]; then
        max_mem_used=$(awk ' NR == 1 {max=$2; min=$2} NR > 1 && $2 > max {max=$2} END {print max}' $REMORA_OUTDIR/memory_all_nodes.txt)
        low_mem=$(echo "$max_mem_used > $MEM_THRESHOLD" | bc)
        printf "%-29s %-1s %-4.2f GB\n" " Max Memory Used Per Node" ":" $max_mem_used  | tee -a $REMORA_OUTDIR/remora_summary.txt
        if [ "$low_mem" -eq "1" ] && [ "$REMORA_WARNING" -gt "0" ]; then
          printf "%-s\n" "*** REMORA: WARNING - Free memory per node close to zero." | tee -a $REMORA_OUTDIR/remora_summary.txt
        fi
        sed -i '1i #HOST     VIRT_MAX  RES_MAX  FREE_MIN' $REMORA_OUTDIR/memory_all_nodes.txt
    else
        max_mem_used=$(awk ' NR == 1 {max=$3; min=$3} NR > 1 && $3 > max {max=$3} END {print max}' $REMORA_OUTDIR/memory_all_nodes.txt)
        low_mem=$(echo "$max_mem_used > $MEM_THRESHOLD" | bc)        
        printf "%-29 %-1s %-4.2f GB\n" " Max Memory Used Per Node" ":" $max_mem_used | tee -a $REMORA_OUTDIR/remora_summary.txt
        if [ "$low_mem" -eq "1" ] && [ "$REMORA_WARNING" -gt "0" ]; then
          printf "%-s\n" "*** REMORA: WARNING - Free memory per node close to zero." | tee -a $REMORA_OUTDIR/remora_summary.txt
        fi
        sed -i '1i #HOST     VIRT_MAX  RES_MAX  FREE_MIN' $REMORA_OUTDIR/memory_all_nodes.txt
    fi

    if [ "$REMORA_SYMMETRIC" == "1" ]; then
        # Virtual memory in Phi seems to report always resident+8GB, so let's report only resident in stdout, which we know is true.
		# Hardcoded MIC memory to maximum 7GB available for user
        max_mem_used=$(awk ' NR == 1 {max=$3; min=$3} NR > 1 && $3 > max {max=$3} END {print max}' $REMORA_OUTDIR/memory_all_nodes_mic.txt)
        free_min_mic=$(awk ' NR == 1 {max=$3; min=$3} NR > 1 && $3 > max {max=$3} END {print 7.0-max}' $REMORA_OUTDIR/memory_all_nodes_mic.txt)
        low_mem=$(echo "$free_min_mic < 1.0" | bc)
        printf "%-29s %-1s %-4.2f GB\n" " Max Memory Used Per Phi" ":" $max_mem_used | tee -a $REMORA_OUTDIR/remora_summary.txt
        if [ "$low_mem" -eq "1" ] && [ "$REMORA_WARNING" -gt "0" ]; then
          printf "%-s \n" "*** REMORA:  WARNING - Free memory per Phi close to zero."  | tee -a $REMORA_OUTDIR/remora_summary.txt
        fi
        sed -i '1i #HOST     VIRT_MAX  RES_MAX  FREE_MIN' $REMORA_OUTDIR/memory_all_nodes_mic.txt
    fi

    if [ "$REMORA_CUDA" == "1" ]; then
        max_mem_used=$(awk ' NR == 1 {max=$2; min=$2} NR > 1 && $2 > max {max=$2} END {print max}' $REMORA_OUTDIR/gpu_memory_all_nodes.txt)
        free_min_gpu=$(awk ' NR == 1 {max=$3; min=$3} NR > 1 && $3 < min {min=$3} END {print min}' $REMORA_OUTDIR/gpu_memory_all_nodes.txt)
        low_mem=$(echo "$free_min_gpu < 1.0" | bc)  
        printf "%-29s %-1s %-4.2f GB\n" " Max Memory Used Per GPU" ":" $max_mem_used | tee -a $REMORA_OUTDIR/remora_summary.txt
        if [ "$low_mem" -eq "1" ] && [ "$REMORA_WARNING" -gt "0" ]; then
          printf "%-s \n" "*** REMORA: WARNING - Free memory per GPU close to zero."  | tee -a $REMORA_OUTDIR/remora_summary.txt
        fi
        sed -i '1i #HOST     MAX  FREE_MIN' $REMORA_OUTDIR/gpu_memory_all_nodes.txt
    fi

    # Show MPI communication time if available
    # Check both for "data" from mpiP collection and "info" for sanity
	if [ -e "$REMORA_OUTDIR/mpi_data.txt" ] && [ -e "$REMORA_OUTDIR/mpi_info.txt" ]; then
        mpiTime=$(awk '{print $4}' $REMORA_OUTDIR/mpi_info.txt | tail -n 1 )
        printf "%-29s %-1s %-4.2f %%\n" " MPI Communication Time" ":" $mpiTime | tee -a $REMORA_OUTDIR/remora_summary.txt
    fi


    #Show some timings (h:m:s.ms)
    show_time $((END-START))

    #Show Maximum IO Requests/S to all MDS servers (H-Home, S-Scratch, W-Work)
    if [ "$REMORA_MODE" == "FULL" ] || [ "$REMORA_MODE" == "MONITOR" ]; then

      if [ "$REMORA_LUSTRE" == "1" ]; then
        printf "%s\n" $bar | tee -a $REMORA_OUTDIR/remora_summary.txt
        for i in `ls $REMORA_OUTDIR/lustre_*_rate.txt`; do
			fullname=`head -n 1 $i | awk '{ print $2 }'`       
            fs=`basename $fullname "-RQ"`
            waiting=1
            while [ "$waiting" -lt "10" ] && [ ! -r $REMORA_OUTDIR/lustre_${fs}_rate.txt ]; do
              sleep 2
              waiting=$((waiting+1))
            done
            if [ "$waiting" -gt "1" ] && [ "$REMORA_WARNING" -gt "1" ]; then
              printf "*** REMORA: WARNING - Slow file system response.\n"
              printf "*** REMORA: WARNING - It took %d seconds to reach the output files.\n" $((waiting*2))
            fi
            fsio=$(awk ' NR == 2 {max=$2; min=$2} NR > 2 && $2 > max {max=$2} END {print max}' $REMORA_OUTDIR/lustre_${fs}_rate.txt) 
            fsrd=$(awk ' NR == 2 {max=$3; min=$3} NR > 2 && $3 > max {max=$3} END {print max}' $REMORA_OUTDIR/lustre_${fs}_rate.txt)
            fswr=$(awk ' NR == 2 {max=$4; min=$4} NR > 2 && $4 > max {max=$4} END {print max}' $REMORA_OUTDIR/lustre_${fs}_rate.txt)
            printf "%-14s %-14s %-1s %7.0f IOPS %7.0f RD(MB/S) %7.0f WR(MB/S)\n" " Max IO Load /" $fs ":" $fsio $fsrd $fswr | tee -a $REMORA_OUTDIR/remora_summary.txt
        done
      fi

      if [ "$REMORA_DVS" == "1" ]; then
        for i in `ls $REMORA_OUTDIR/dvs_*_rate.txt`; do
          fullname=`head -n 1 $i | awk '{ print $2 }'`
          fs=`basename $fullname "-RQ"`
          waiting=1
          while [ "$waiting" -lt "10" ] && [ ! -r $REMORA_OUTDIR/dvs_${fs}_rate.txt ]; do
            sleep 2
            waiting=$((waiting+1))
          done
          if [ "$waiting" -gt "1" ] && [ "$REMORA_WARNING" -gt "1" ]; then
            printf "*** REMORA: WARNING - Slow file system response.\n"
            printf "*** REMORA: WARNING - It took %d seconds to reach the output files.\n" $((waiting*2))
          fi
          fsio=$(awk ' NR == 2 {max=$2; min=$2} NR > 2 && $2 > max {max=$2} END {print max}' $REMORA_OUTDIR/dvs_${fs}_rate.txt)
          #fsrd=$(awk ' NR == 1 {max=$3; min=$3} NR > 1 && $3 > max {max=$3} END {print max}' $REMORA_OUTDIR/dvs_${fs}_rate.txt)
          #fswr=$(awk ' NR == 1 {max=$4; min=$4} NR > 1 && $4 > max {max=$4} END {print max}' $REMORA_OUTDIR/dvs_${fs}_rate.txt)
          #printf "%-14s %-14s %-1s %7.0f IOPS %7.0f RD(MB/S) %7.0f WR(MB/S)\n" " Max IO Load /" $fs ":" $fsio $fsrd $fswr | tee -a $REMORA_OUTDIR/remora_summary.txt
          printf "%-14s %-14s %-1s %7.0f IOPS %7s RD(MB/S) %7s WR(MB/S)\n" " Max IO Load /" $fs ":" $fsio "---" "---" | tee -a $REMORA_OUTDIR/remora_summary.txt
        done
      fi
    fi

    printf "%s\n" $dbar | tee -a $REMORA_OUTDIR/remora_summary.txt
    printf "%-29s %-1s %-d %-7s\n" " Sampling Period" ":" $REMORA_PERIOD "seconds" | tee -a $REMORA_OUTDIR/remora_summary.txt
    printf "%-29s %-1s %-s\n" " Complete Report Data" ":" $REMORA_OUTDIR           | tee -a $REMORA_OUTDIR/remora_summary.txt
    printf "%s\n" $dbar | tee -a $REMORA_OUTDIR/remora_summary.txt
    echo ""
}
