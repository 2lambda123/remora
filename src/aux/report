#!/bin/sh
#
#========================================================================
# HEADER
#========================================================================
#% DESCRIPTION
#% report
#%
#% DO NOT call this script directory. This is called by REMORA
#%
#% This script provides extra functionality used by REMORA
#========================================================================
#- IMPLEMENTATION
#-      version     REMORA 1.5
#-      authors     Carlos Rosales (carlos@tacc.utexas.edu)
#-                  Antonio Gomez  (agomez@tacc.utexas.edu)
#-      license     MIT
#
#========================================================================
#  HISTORY
#       2015/12/09: Initial version
#========================================================================

show_final_report() {
    END=$1
    START=$2

    # Write to stdout the maximum memory used during the run
    echo ""
    for i in $NODES
    do
        ssh $i "$REMORA_BIN/remora_summary.sh $i $REMORA_OUTDIR $REMORA_SYMMETRIC $REMORA_CUDA"
    done

    # Write time the run ended
    echo "" >> $REMORA_OUTDIR/vars.txt; date >> $REMORA_OUTDIR/vars.txt

    local bar="------------------------------------------------------------------------------"
    local dbar="=============================================================================="

    echo "=============================== REMORA SUMMARY ===============================" | tee -a $REMORA_OUTDIR/summary.txt
# Print memory usage to stdout
#I can't think of a case were virtual would be less than resident, so let's report only virtual in stdout (which triggers OOM killer)..
    if [ "$REMORA_CUDA" == "0" ]; then
        max_mem_used=$(awk ' NR == 1 {max=$2; min=$2} NR > 1 && $2 > max {max=$2} END {print max}' $REMORA_OUTDIR/mem_all_nodes.txt)
        free_min_cpu=$(awk ' NR == 1 {max=$2; min=$2} NR > 1 && $2 > max {max=$2} END {print 32.0-max}' $REMORA_OUTDIR/mem_all_nodes.txt)
        low_mem=$(echo "$free_min_cpu < 2.0" | bc)
        printf "%-29s %-1s %-4.2f GB\n" " Max Memory Used Per Node" ":" $max_mem_used  | tee -a $REMORA_OUTDIR/summary.txt
        if [ "$low_mem" -eq "1" ]; then
          printf "%-s %-4.2f GB\n" " WARNING - Free memory per node close to zero: " $free_min_cpu | tee -a $REMORA_OUTDIR/summary.txt
        fi
        sed -i '1i #HOST     VIRT_MAX  RES_MAX  FREE_MIN' $REMORA_OUTDIR/mem_all_nodes.txt
    else
        max_mem_used=$(awk ' NR == 1 {max=$3; min=$3} NR > 1 && $3 > max {max=$3} END {print max}' $REMORA_OUTDIR/mem_all_nodes.txt)
        free_min_cpu=$(awk ' NR == 1 {max=$3; min=$3} NR > 1 && $3 > max {max=$3} END {print 32.0-max}' $REMORA_OUTDIR/mem_all_nodes.txt)
        low_mem=$(echo "$free_min_cpu < 2.0" | bc)        
        printf "%-29 %-1s %-4.2f GB\n" " Max Memory Used Per Node" ":" $max_mem_used | tee -a $REMORA_OUTDIR/summary.txt
        if [ "$low_mem" -eq "1" ]; then
          printf "%-s %-4.2f GB\n" " WARNING - Free memory per node close to zero: " $free_min_cpu | tee -a $REMORA_OUTDIR/summary.txt
        fi
        sed -i '1i #HOST     VIRT_MAX  RES_MAX  FREE_MIN' $REMORA_OUTDIR/mem_all_nodes.txt
    fi

    if [ "$REMORA_SYMMETRIC" == "1" ]; then
        #Virtual memory in Phi seems to report always resident+8GB, so let's report only resident in stdout, which we know is true.
        max_mem_used=$(awk ' NR == 1 {max=$3; min=$3} NR > 1 && $3 > max {max=$3} END {print max}' $REMORA_OUTDIR/mem_all_nodes_mic.txt)
        free_min_mic=$(awk ' NR == 1 {max=$3; min=$3} NR > 1 && $3 > max {max=$3} END {print 7.0-max}' $REMORA_OUTDIR/mem_all_nodes_mic.txt)
        low_mem=$(echo "$free_min_mic < 1.0" | bc)
        printf "%-29s %-1s %-4.2f GB\n" " Max Memory Used Per Phi" ":" $max_mem_used | tee -a $REMORA_OUTDIR/summary.txt
        if [ "$low_mem" -eq "1" ]; then
          printf "%-s %-4.2f GB\n" " WARNING - Free memory per Phi close to zero: " $free_min_mic | tee -a $REMORA_OUTDIR/summary.txt
        fi
        sed -i '1i #HOST     VIRT_MAX  RES_MAX  FREE_MIN' $REMORA_OUTDIR/mem_all_nodes_mic.txt
    fi

    if [ "$REMORA_CUDA" == "1" ]; then
        max_mem_used=$(awk ' NR == 1 {max=$2; min=$2} NR > 1 && $2 > max {max=$2} END {print max}' $REMORA_OUTDIR/mem_all_nodes_gpu.txt)
        free_min_gpu=$(awk ' NR == 1 {max=$3; min=$3} NR > 1 && $3 < min {min=$3} END {print min}' $REMORA_OUTDIR/mem_all_nodes_gpu.txt)
        low_mem=$(echo "$free_min_gpu < 1.0" | bc)  
        printf "%-29s %-1s %-4.2f GB\n" " Max Memory Used Per GPU" ":" $max_mem_used | tee -a $REMORA_OUTDIR/summary.txt
        if [ "$low_mem" -eq "1" ]; then
          printf "%-s %-4.2f GB\n" " WARNING - Free memory per GPU close to zero: " $free_min_gpu | tee -a $REMORA_OUTDIR/summary.txt
        fi
        sed -i '1i #HOST     MAX  FREE_MIN' $REMORA_OUTDIR/mem_all_nodes_gpu.txt
    fi

    #Show some timings (h:m:s.ms)
    show_time $((END-START))

    #Show Maximum IO Requests/S to all MDS servers (H-Home, S-Scratch, W-Work)
    if [ "$REMORA_MODE" == "FULL" ]; then
      printf "%s\n" $bar | tee -a $REMORA_OUTDIR/summary.txt
      file=$(ls $REMORA_OUTDIR/lustre_*.txt | awk '{print $1}' | tail -n 1)
      idx=2
      for i in `head -n 1 $file`; do
        isfs=$( echo "$idx % 3" | bc ) 
        if [ "$isfs" -eq "0" ]; then
          fs=`basename $i "-RQ"`
          waiting=1
          if [ ! -r $REMORA_OUTDIR/lustre.${fs}.rate ]; then
            while [ "$waiting" -lt "10" ]; do
              sleep 2
              waiting=$((waiting+1))
            done
            printf "WARNING - Slow file system response - Time to get to files: %d seconds\n" $((waiting*2))
          fi
          fsio=$(awk ' NR == 1 {max=$2; min=$2} NR > 1 && $2 > max {max=$2} END {print max}' $REMORA_OUTDIR/lustre.${fs}.rate)         
          fsrd=$(awk ' NR == 1 {max=$3; min=$3} NR > 1 && $3 > max {max=$3} END {print max}' $REMORA_OUTDIR/lustre.${fs}.rate)
          fswr=$(awk ' NR == 1 {max=$4; min=$4} NR > 1 && $4 > max {max=$4} END {print max}' $REMORA_OUTDIR/lustre.${fs}.rate)
          printf "%-14s %-14s %-1s %7.0f IOPS %7.0f RD(MB/S) %7.0f WR(MB/S)\n" " Max IO Load /" $fs ":" $fsio $fsrd $fswr | tee -a $REMORA_OUTDIR/summary.txt
        fi
        idx=$((idx+1))
      done
    fi

    printf "%s\n" $dbar | tee -a $REMORA_OUTDIR/summary.txt
    printf "%-29s %-1s %-d %-7s\n" " Sampling Period" ":" $REMORA_PERIOD "seconds" | tee -a $REMORA_OUTDIR/summary.txt
    printf "%-29s %-1s %-s\n" " Complete Report Data" ":" $REMORA_OUTDIR           | tee -a $REMORA_OUTDIR/summary.txt
    printf "%s\n" $dbar | tee -a $REMORA_OUTDIR/summary.txt
    echo ""
}
