#!/bin/sh
#
#========================================================================
# HEADER
#========================================================================
#% DESCRIPTION
#% report
#%
#% DO NOT call this script directory. This is called by REMORA
#%
#% This script provides extra functionality used by REMORA
#========================================================================
#- IMPLEMENTATION
#-      version     REMORA 1.4
#-      authors     Carlos Rosales (carlos@tacc.utexas.edu)
#-                  Antonio Gomez  (agomez@tacc.utexas.edu)
#-      license     MIT
#
#========================================================================
#  HISTORY
#       2015/12/09: Initial version
#========================================================================

show_final_report() {
    END=$1
    START=$2

    # Write to stdout the maximum memory used during the run
    echo ""
    for i in $NODES
    do
        ssh $i "$REMORA_BIN/remora_summary.sh $i $REMORA_OUTDIR $REMORA_SYMMETRIC $REMORA_CUDA"
    done

    # Write time the run ended
    echo "" >> $REMORA_OUTDIR/vars.txt; date >> $REMORA_OUTDIR/vars.txt

    echo "=============================================================================="
# Print memory usage to stdout
#I can't think of a case were virtual would be less than resident, so let's report only virtual in stdout (which triggers OOM killer)..
    if [ "$REMORA_CUDA" == "0" ]; then
        awk ' NR == 1 {max=$2; min=$2} NR > 1 && $2 > max {max=$2} END {printf "REMORA: Max Memory Used Per Node : %4.2f GB\n",max}' $REMORA_OUTDIR/mem_all_nodes.txt
        free_min_cpu=$(awk ' NR == 1 {max=$4; min=$4} NR > 1 && $4 < min {min=$4} END {printf "%4.2f\n",min}' $REMORA_OUTDIR/mem_all_nodes.txt)
        free_min_cpu_virt=$(awk ' NR == 1 {max=$2; min=$2} NR > 1 && $2 > max {max=$2} END {print 32.0-max}' $REMORA_OUTDIR/mem_all_nodes.txt)
        echo "$free_min_cpu_virt 2.0" | awk '{res=0} $1 < $2 {printf "REMORA: WARNING - Free memory per node close to zero ( %4.2f GB )\n",free_min_cpu}'
        sed -i '1i #HOST     VIRT_MAX  RES_MAX  FREE_MIN' $REMORA_OUTDIR/mem_all_nodes.txt
    else
        awk ' NR == 1 {max=$3; min=$3} NR > 1 && $3 > max {max=$3} END {printf "REMORA: Max Memory Used Per Node : %4.2f GB\n",max}' $REMORA_OUTDIR/mem_all_nodes.txt
        free_min_cpu=$(awk ' NR == 1 {max=$4; min=$4} NR > 1 && $4 < min {min=$4} END {printf "%4.2f\n",min}' $REMORA_OUTDIR/mem_all_nodes.txt)
        free_min_cpu_virt=$(awk ' NR == 1 {max=$3; min=$3} NR > 1 && $3 > max {max=$3} END {print 32.0-max}' $REMORA_OUTDIR/mem_all_nodes.txt)
        echo "$free_min_cpu_virt 2.0" | awk '{res=0} $1 < $2 {printf "REMORA: WARNING - Free memory per node close to zero ( %4.2f GB )\n",free_min_cpu}'
        sed -i '1i #HOST     VIRT_MAX  RES_MAX  FREE_MIN' $REMORA_OUTDIR/mem_all_nodes.txt
    fi

    if [ "$REMORA_SYMMETRIC" == "1" ]; then
        #Virtual memory in Phi seems to report always resident+8GB, so let's report only resident in stdout, which we know is true.
        awk ' NR == 1 {max=$3; min=$3} NR > 1 && $3 > max {max=$3} END {printf "REMORA: Max Memory Used Per Phi  : %4.2f GB\n",max}' $REMORA_OUTDIR/mem_all_nodes_mic.txt
        free_min_mic=$(awk ' NR == 1 {max=$4; min=$4} NR > 1 && $4 < min {min=$4} END {printf "%4.2f\n",min}' $REMORA_OUTDIR/mem_all_nodes_mic.txt)
        free_min_mic_virt=$(awk ' NR == 1 {max=$3; min=$3} NR > 1 && $3 > max {max=$3} END {print 7.0-max}' $REMORA_OUTDIR/mem_all_nodes_mic.txt)
        echo "$free_min_mic_virt 1.0" | awk '{res=0} $1 < $2 {printf "REMORA: WARNING - Free memory per Xeon Phi close to zero ( %4.2f GB )\n",free_min_mic}'
        sed -i '1i #HOST     VIRT_MAX  RES_MAX  FREE_MIN' $REMORA_OUTDIR/mem_all_nodes_mic.txt
    fi

    if [ "$REMORA_CUDA" == "1" ]; then
        awk ' NR == 1 {max=$2; min=$2} NR > 1 && $2 > max {max=$2} END {printf "REMORA: Max Memory Used Per GPU  : %4.2f GB\n",max}' $REMORA_OUTDIR/mem_all_nodes_gpu.txt
        free_min_gpu=$(awk ' NR == 1 {max=$3; min=$3} NR > 1 && $3 < min {min=$3} END {printf "%4.2f\n",min}' $REMORA_OUTDIR/mem_all_nodes_gpu.txt)
        echo "$free_min_gpu 1.0" | awk '{res=0} $1 < $2 {printf "REMORA: WARNING - Free memory per GPU close to zero ( %4.2f GB )\n",$1}'
        sed -i '1i #HOST     MAX  FREE_MIN' $REMORA_OUTDIR/mem_all_nodes_gpu.txt
    fi

    #Show some timings (h:m:s.ms)
    show_time $((END-START))

    #Show Maximum IO Requests/S to all MDS servers (H-Home, S-Scratch, W-Work)
    if [ "$REMORA_MODE" == "FULL" ]; then
      idx=0
      for file in `ls $REMORA_OUTDIR/lustre*.iops`; do
        fsname=$(basename $file iops)
        fsiops=$(awk ' NR == 1 {max=$2; min=$2} NR > 1 && $2 > max {max=$2} END {print max}' $file)
        printf "REMORA: Max load in fs %s  : %9.2f IOPS\n" $fsname $fsiops
        idx=$((idx+1))
      done
      
    fi
    # CRF-DBG
    #if [ "$REMORA_MODE" == "FULL" ]; then
    #    $REMORA_BIN/remora_parse_fs.py $REMORA_OUTDIR
    #fi

    echo "------------------------------------------------------------------------------"
    echo "REMORA: Sampling Period          : $REMORA_PERIOD seconds"
    echo "REMORA: Complete Report Data     : $REMORA_OUTDIR"
    echo "=============================================================================="
    # Add some headers
    echo ""
}
